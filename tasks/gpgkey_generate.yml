---
- name: Check entropy state
  ansible.builtin.command: "cat /proc/sys/kernel/random/entropy_avail"
  changed_when: false
  register: entropy
- name: Entropy state
  ansible.builtin.debug:
    var: entropy

- name: Debian | Update cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: "{{ gpgkey_generate_apt_cache_valid_time | default('3600') }}"
  when: ansible_os_family == 'Debian'
  become: yes
- name: Debian | Ensure have enough randomness
  ansible.builtin.apt:
    name:
      - rng-tools
      - gnupg
      ## https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user
      - acl
    state: present
    update_cache: yes
    cache_valid_time: "{{ gpg_apt_cache_valid_time }}"
  when: >
    (ansible_distribution == 'Debian' and ansible_distribution_version|int >= 7) or
    (ansible_distribution == 'Ubuntu' and ansible_distribution_version|int >= 14)
  become: yes
  register: pkg_result
  until: pkg_result is success
- name: Debian | Ensure have enough randomness
  ansible.builtin.apt:
    name:
      - rng-tools
      - gnupg
    state: present
    update_cache: yes
    cache_valid_time: "{{ gpg_apt_cache_valid_time }}"
  when: >
    (ansible_distribution == 'Debian' and ansible_distribution_version|int < 7) or
    (ansible_distribution == 'Ubuntu' and ansible_distribution_version|int < 14)
  become: yes
  register: pkg_result
  until: pkg_result is success

- name: Redhat | Ensure have enough randomness
  ansible.builtin.yum:
    name:
      - haveged
      - rng-tools
      - gnupg
      - acl
    state: present
    update_cache: yes
  when: ansible_os_family == "RedHat"
  become: yes
  register: pkg_result
  until: pkg_result is success
- name: Enable haveged - redhat
  ansible.builtin.service:
    name: haveged
    state: started
    enabled: yes
  become: yes
  when: >
    ansible_os_family == "RedHat" and
    not (ansible_virtualization_type is defined and (
        ansible_virtualization_type == "docker" or ansible_virtualization_type == "containerd"
      )
    )
- name: Check entropy state
  ansible.builtin.command: "cat /proc/sys/kernel/random/entropy_avail"
  changed_when: false
  register: entropy2
- name: Entropy state
  ansible.builtin.debug:
    var: entropy2

- name: Ensure .gnupg config directory exists with right permissions
  ansible.builtin.file:
    dest: "{{ gpg_home }}/.gnupg"
    state: directory
    mode: "0700"
    owner: "{{ gpg_generator_user }}"

- name: Set default gpg options
  ansible.builtin.template:
    src: "{{ gpg_conf_file_template }}"
    dest: "{{ gpg_home }}/.gnupg/gpg.conf"
    mode: "0600"
    owner: "{{ gpg_generator_user }}"

- name: Copy default template for gpg key generation
  ansible.builtin.template:
    src: "{{ gpg_gen_key_script_template }}"
    dest: "{{ gpg_home }}/.gnupg/gen-key-script-{{ gpg_user }}"
    mode: "0600"
    owner: "{{ gpg_generator_user }}"

- name: Import gpg21
  ansible.builtin.import_tasks: gpg21.yml
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int > 16

## Note: matching on realname or email doesn't allow to create multiple keys. alternative?
- name: Check existing secret key
  ansible.builtin.shell: "gpg --list-secret-keys | grep '{{ gpg_realname }}'"
  changed_when: false
  ignore_errors: true
  become: yes
  become_user: "{{ gpg_generator_user }}"
  register: gpgkeys
  no_log: "{{ gpg_no_log }}"
- name: Debug | gpg keys
  ansible.builtin.debug:
    var: gpgkeys
    verbosity: 2
  no_log: "{{ gpg_no_log }}"

- name: Generate gpg key
  ansible.builtin.command: "gpg --batch --gen-key {{ gpg_home }}/.gnupg/gen-key-script-{{ gpg_user }}"
  args:
    chdir: "{{ gpg_home }}"
  become: yes
  become_user: "{{ gpg_generator_user }}"
  when: gpgkeys is defined and not gpgkeys.stdout
  register: genkey
  no_log: "{{ gpg_no_log }}"

- name: Debug | genkey
  ansible.builtin.debug:
    var: genkey
    verbosity: 1
- name: GPG<2.1 | import generated keys
  ansible.builtin.command: "gpg --import {{ gpg_home }}/{{ gpg_pubkeyfile }} {{ gpg_home }}/{{ gpg_privkeyfile }}"
  become: yes
  become_user: "{{ gpg_generator_user }}"
  when: >
    gpgkeys is defined and not gpgkeys.stdout and
    not (
          (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int > 16) or
          (ansible_os_family == "RedHat" and ansible_distribution_major_version|int > 7)
        )

- name: GPG2.1+ | import generated keys
  ansible.builtin.command: "gpg --import {{ gpg_home }}/{{ gpg_pubkeyfile }}"
  become: yes
  become_user: "{{ gpg_generator_user }}"
  when: >
    gpgkeys is defined and not gpgkeys.stdout and
    (
      (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int > 16) or
      (ansible_os_family == "RedHat" and ansible_distribution_major_version|int > 7)
    )

- name: Get user gpg fingerprint
  ansible.builtin.shell: |
    set -o pipefail
    gpg --list-keys --keyid-format LONG {{ gpg_useremail }} | awk -F'[ /]' '/sub/ { print $5 }' | tee {{ gpg_home }}/{{ gpg_fingerprint }}
  args:
    executable: /bin/bash
    creates: "{{ gpg_home }}/{{ gpg_fingerprint }}"
  register: gpg_user_fingerprint
  become: yes
  become_user: "{{ gpg_generator_user }}"
- name: Get user armored public key
  ansible.builtin.shell: "gpg --export -a {{ gpg_useremail }} > {{ gpg_home }}/{{ gpg_pubkeyfileexport }}"
  args:
    creates: "{{ gpg_home }}/{{ gpg_pubkeyfileexport }}"
  become: yes
  become_user: "{{ gpg_generator_user }}"

- name: Debug | gpg_pull
  ansible.builtin.debug:
    var: gpg_pull
- name: Fetch files to orchestrator
  ansible.builtin.fetch:
    src: "{{ item }}"
    dest: "{{ gpg_pulldir }}/"
    flat: "yes"
  with_items:
    # - "{{ gpg_home }}/{{ gpg_privkeyfile }}"
    # - "{{ gpg_home }}/{{ gpg_pubkeyfile }}"
    - "{{ gpg_home }}/{{ gpg_pubkeyfileexport }}"
    - "{{ gpg_home }}/{{ gpg_fingerprint }}"
  when: gpg_pull is defined and gpg_pull

- name: Fetch privatekey file to orchestrator
  ansible.builtin.fetch:
    src: "{{ item }}"
    dest: "{{ gpg_pulldir }}/"
    flat: "yes"
  with_items:
    - "{{ gpg_home }}/{{ gpg_privkeyfile }}"
  when: gpg_pull is defined and gpg_pull and gpg_pull_privatekey is defined and gpg_pull_privatekey
